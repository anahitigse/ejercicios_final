{"cells":[{"cell_type":"markdown","metadata":{"id":"YE7k1zoO9JF7"},"source":["# EJERCICIOS EXTRA\n","## Extra 1 "]},{"cell_type":"code","source":["##DATOS: \n","print(\"NOMBRE: KAREN CHASILUISA\")\n","print(\"FECHA: 31/7/2022\")\n","print(\"CURSO DE PYTHON\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7B_6CBpDEjuJ","executionInfo":{"status":"ok","timestamp":1659318266285,"user_tz":300,"elapsed":337,"user":{"displayName":"Karen Lisbeth","userId":"02790293254327695037"}},"outputId":"c72ca554-9e80-4e11-a49a-d91cf0f913fa"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["NOMBRE: KAREN CHASILUISA\n","FECHA: 31/7/2022\n","CURSO DE PYTHON\n"]}]},{"cell_type":"code","execution_count":2,"metadata":{"executionInfo":{"elapsed":356,"status":"ok","timestamp":1659316449215,"user":{"displayName":"Karen Lisbeth","userId":"02790293254327695037"},"user_tz":300},"id":"J6hxMcQT6OjI"},"outputs":[],"source":["# La siguiente función debe aceptar un argumento: una cadena.\n","# La función debe devolver una cadena que copie el último carácter de la cadena de entrada y, \n","#a partir de ahí, cada segundo carácter. Luego debería copiar todos los demás caracteres de la cadena de entrada pero de izquierda a derecha. \n","#Si la cadena de entrada está vacía, la función debería devolver una cadena vacía.\n","\n","# POR EJEMPLO al llamar la fucnion : \n","# main('abcde') \n","# debe resultar en 'ecabd' \n","\n","def main(string_1):\n","    #Corrige las lienas para que se de el resultado deseado \n","    pass"]},{"cell_type":"code","source":["##resolucion:\n","def main(string_1):\n","  string_2 = string_1 [::-2]\n","  for i in string_1:\n","    if i not in string_2: string_2 += i\n","  return string_2\n","main(\"klmnño\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"ayZLF3YS9raM","executionInfo":{"status":"ok","timestamp":1659317394713,"user_tz":300,"elapsed":376,"user":{"displayName":"Karen Lisbeth","userId":"02790293254327695037"}},"outputId":"b95bc4b2-0424-44bd-c401-64ce73c7b152"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'onlkmñ'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":9}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2U4_XpzrBX5i"},"outputs":[],"source":["# La siguiente función debe aceptar un argumento: una tupla.\n","\n","# La función debe devolver un número entero con el valor absoluto de la diferencia del número\n","# de tuplas y el número de listas dentro de la tupla.\n","\n","# Por ejemplo, la funcion: \n","# main(('k', 'cheers', (8,7), [32.3,-1], (9,))) \n","# debe dar 1\n","\n","def main(tuple_1):\n","    #Corrige las lienas para que se de el resultado deseado \n","    pass"]},{"cell_type":"code","source":["##Resolucion:\n","def main(tuple_1):\n","  t, l = 0, 0\n","  for i in tuple_1:\n","    if isinstance(i, tuple): t += 1\n","    elif isinstance(i, list): l += 1\n","  return abs(t-1)\n","main((\"k\", \"cheer\", (8,7), [32.3, -1],(9,), (2,True)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4xCcG3sO_-GX","executionInfo":{"status":"ok","timestamp":1659317245321,"user_tz":300,"elapsed":341,"user":{"displayName":"Karen Lisbeth","userId":"02790293254327695037"}},"outputId":"16e342de-5a51-4324-f202-11caa47c5fbe"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hJ5_h_FQX8RY"},"outputs":[],"source":["# La siguiente función debe aceptar un argumento: un diccionario. Las claves son números enteros y\n","# valores son listas\n","\n","# La función debe devolver el número total de todos los elementos en todas las listas combinadas,\n","# excepto para las listas que tienen una key divisible por 3\n","\n","# Por ejemplo: \n","# main({1: [1,2,3], 2: [1,2,3], 3: [1,2,3]})  \n","# da 6 \n","\n","def main(dictionary_1):\n","    #Corrige las lienas para que se de el resultado deseado \n","    pass"]},{"cell_type":"code","source":["#resolucion:\n","def main(dictionary_1):\n","  num = 0\n","  for i in dictionary_1.keys():\n","    if i % 3: num = num + len(dictionary_1[i])\n","  print(num)\n","main({1: [1,2,3], 2: [1,2,3], 3: [1,2,3], 4: [1,2,3,4,5], 5: [1,2,3]})\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ycJmRyKRA_h9","executionInfo":{"status":"ok","timestamp":1659317535561,"user_tz":300,"elapsed":394,"user":{"displayName":"Karen Lisbeth","userId":"02790293254327695037"}},"outputId":"3fb9f134-ac2b-4de1-b147-81fae16b7014"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["14\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FKhPvj3GYZ9v"},"outputs":[],"source":["# La siguiente función debería aceptar una lista de cadenas\n","\n","# La función debe devolver una cadena compuesta de todas las cadenas, pero entre cada cadena \n","# debe ser un espacio. Excepto si la cadena es un solo !, ., o un ?\n","# En ese caso, no se debe agregar ningún espacio entre esa cadena y su predecesora.\n","\n","# POr ejemplo: \n","# main(['People', 'are', 'Funny', '.'])  \n","# da como resultado 'People are Funny.' \n","\n","def main(list_1):\n","    list_1 = list_1[:]\n","    #Corrige las lienas para que se de el resultado deseado \n","    pass\n","\n","\n"]},{"cell_type":"code","source":["##Resolucion:\n","def main(list_1):\n","  list_1 = list_1[:]\n","  resultado = \"\"\n","  for i, j in enumerate(list_1, 0):\n","    if j in [\"!\", \".\", \"?\", \",\"]: resultado += list_1[i]\n","    else: resultado += \" \" + j\n","  print(resultado)\n","main([\"Estudiantes\", \",\", \"Yo\", \"soy\", \"muy feliz\", \"esuchando musica\", \"!\"])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ctL_UvhxCJxb","executionInfo":{"status":"ok","timestamp":1659317831700,"user_tz":300,"elapsed":348,"user":{"displayName":"Karen Lisbeth","userId":"02790293254327695037"}},"outputId":"beba084c-80a4-4cbc-8b82-83e4935805a1"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":[" Estudiantes, Yo soy muy feliz esuchando musica!\n"]}]},{"cell_type":"markdown","metadata":{"id":"sqVecFFLi3OO"},"source":["## Extra 2\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NIZJR0VGi4ps"},"outputs":[],"source":["# La siguiente función debería aceptar cuatro argumentos: cuatro enteros\n","\n","# La función debe devolver una lista con todos los enteros entre el primero y\n","# segundo entero (ambos inclusivo []) que son divisibles tanto por el 3er como por el 4to entero.\n","\n","# Por ejemplo: \n","# main(100, 800, 100, 200) \n","# Debe dar [200, 400, 600, 800] \n","\n","def main(integer_1, integer_2, integer_3, integer_4):\n","    #Corrige las lienas para que se de el resultado deseado\n","    pass"]},{"cell_type":"code","source":["##Resolucion:\n","def main(integer_1, integer_2, integer_3, integer_4):\n","    lista = [i for i in range(integer_1, integer_2+1) if not (i % integer_3 or i % integer_4)]\n","    return lista\n","\n","main(100, 900, 15, 25)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1pmbPEBuDOmR","executionInfo":{"status":"ok","timestamp":1659317903228,"user_tz":300,"elapsed":380,"user":{"displayName":"Karen Lisbeth","userId":"02790293254327695037"}},"outputId":"cb925ca5-236f-417e-820e-91893916d524"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[150, 225, 300, 375, 450, 525, 600, 675, 750, 825, 900]"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dtu2-H95jgh0"},"outputs":[],"source":["# La siguiente función debería aceptar como argumento una lista con 3 enteros como elementos\n","\n","# La función debería devolver True si exactamente un entero difiere de todos los demás enteros,\n","# y falso en todos los demás casos.\n","\n","# Por ejemplo: \n","# main([1, 1, 2]) \n","# debe dar como resultado true \n","\n","def main(list_1):\n","  \n","    #Corrige las lienas para que se de el resultado deseado \n","    pass"]},{"cell_type":"code","source":["##Resolucion:\n","def main(list_1):\n","    theSet = set(list_1)\n","    if len(theSet) == 1:\n","        return False\n","    return True\n","\n","main([1, 0, 0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"usyPCMZcDfDR","executionInfo":{"status":"ok","timestamp":1659317929191,"user_tz":300,"elapsed":339,"user":{"displayName":"Karen Lisbeth","userId":"02790293254327695037"}},"outputId":"d6f23dea-cf00-48a1-ecb5-c82d1ea29807"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fqOe0O0ukR7M"},"outputs":[],"source":["# La función a continuación debe aceptar dos argumentos, una cadena y una lista con caracteres individuales\n","# La función debe devolver una cadena en orden inverso mientras duplica cualquier carácter en la lista\n","\n","# Por ejemplo:\n","# main(\"abalone\", [\"a\",\"i\"]) \n","# resulta en : \"enolaabaa\" \n","\n","def main(string_1, list_1):\n","    #Corrige las lienas para que se de el resultado deseado \n","    pass"]},{"cell_type":"code","source":["##Resolucion:\n","def main(string_1, list_1):\n","    stringList = list(string_1)\n","    string_2 = \"\"\n","    for i in reversed(stringList):\n","        if i in list_1: string_2 += 2*i\n","        else: string_2 += i\n","    return string_2\n","\n","main(\"abalone\", [\"a\",\"i\",\"o\",\"e\"])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"-dKdpy30DmiI","executionInfo":{"status":"ok","timestamp":1659318006497,"user_tz":300,"elapsed":359,"user":{"displayName":"Karen Lisbeth","userId":"02790293254327695037"}},"outputId":"1be6dc87-4150-42c3-94e1-0107c9f8e0b4"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'eenoolaabaa'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":18}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"elapsed":200,"status":"ok","timestamp":1657883991199,"user":{"displayName":"Victor Salazar","userId":"01748899183064234735"},"user_tz":-120},"id":"6XZSEre4lYo4","outputId":"0b9559bb-c326-4de5-d8e7-4299967b6116"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'444444'"]},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":["# La siguiente función debe aceptar un argumento, una lista con números enteros y flotantes\n","# La función debe devolver una lista con solo números enteros y flotantes que terminen en 2\n","\n","# Por ejemplo: \n","# main([12, 2., .12, 3 ]) \n","# debe dar: [12, .12 ] \n","\n","def main(list_1):\n","  \n","    #Corrige las lienas para que se de el resultado deseado \n","    pass"]},{"cell_type":"code","source":["##Resolucion:\n","def main(list_1):\n","    x = [i for i in list_1 if str(i)[-1] == '2']\n","    print(x)\n","\n","main([12, 2., .12, 3, 212, 201, 12.32])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ocd53Zq2D6P3","executionInfo":{"status":"ok","timestamp":1659318042760,"user_tz":300,"elapsed":386,"user":{"displayName":"Karen Lisbeth","userId":"02790293254327695037"}},"outputId":"428f0690-66cb-4cd0-b4eb-201e9688afdb"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["[12, 0.12, 212, 12.32]\n"]}]},{"cell_type":"markdown","metadata":{"id":"6katUxK-9JGM"},"source":["## Extra 3"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KqroULXilgsw"},"outputs":[],"source":["# La siguiente función debería aceptar un argumento, una lista con al menos 2 enteros\n","# La función debe devolver una lista en el mismo orden pero sin el segundo número más alto\n","\n","# Por ejemplo:\n","# main([12, 2, 22, 3 ]) \n","# debe dar:  [2, 22, 3 ] \n","\n","def main(list_1):\n","    list_1 = list_1[:]\n","    #Corrige las lienas para que se de el resultado deseado\n","    pass"]},{"cell_type":"code","source":["##Resolucion:\n","def main(list_1):\n","    list_1.sort()\n","    x = [ i for i in list_1 if i != list_1[-2]]\n","    return x\n","\n","main([12, 2, 22, 3, 12])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-fjpbYBtEE9_","executionInfo":{"status":"ok","timestamp":1659318083509,"user_tz":300,"elapsed":11,"user":{"displayName":"Karen Lisbeth","userId":"02790293254327695037"}},"outputId":"7524d7b1-dbf1-430f-fe2e-9448e73553a6"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[2, 3, 22]"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2yKboKWAtZ0i"},"outputs":[],"source":["# La siguiente función debe aceptar dos argumentos, un número entero y una lista con números enteros\n","# La función debe devolver una lista con Verdadero y Falso para todos los enteros en la lista\n","# por el cual el primer argumento es divisible y False en caso contrario.\n","\n","# Por ejemplo: \n","# main(10, [12, 2, 22, 5 ]) \n","# debe dar [False, True, False, True] \n","\n","def main(integer_1, list_1):\n","    list_1 = list_1[:]\n","    #Corrige las lienas para que se de el resultado deseado\n","    pass"]},{"cell_type":"code","source":["##Resolucion:\n","def main(integer_1, list_1):\n","    x = [ False if integer_1 % i else True for i in list_1]\n","    print(x)\n","\n","main(44, [12, 2, 22, 5, 1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ib5ZJstlEKs-","executionInfo":{"status":"ok","timestamp":1659318101412,"user_tz":300,"elapsed":398,"user":{"displayName":"Karen Lisbeth","userId":"02790293254327695037"}},"outputId":"14604882-d9ee-4419-ca6f-6624e290f6f8"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["[False, True, True, False, True]\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XRiUD6B0yhu_"},"outputs":[],"source":["# La siguiente función debe aceptar un argumento, una lista con cadenas\n","# La función debe devolver un diccionario con como claves las cadenas y como valores\n","# las longitudes de las cadenas\n","\n","# Por ejemplo: \n","# main([\"ad\", \"abc\", \"ab\"]) \n","# debe dar {\"ad\":2, \"abc\":3, \"ab\":2} \n","\n","def main(list_1):\n","    list_1 = list_1[:]\n","    #Corrige las lienas para que se de el resultado deseado\n","    pass"]},{"cell_type":"code","source":["##Resolucion:\n","def main(list_1):\n","    dict_1 = dict()\n","    for i in list_1:\n","        dict_1[i] = len(i)\n","    print(dict_1)\n","\n","main([\"ad\", \"abc\", \"ab\", \"holamundo\", \" \"])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"O4HOyTiMEPn5","executionInfo":{"status":"ok","timestamp":1659318122439,"user_tz":300,"elapsed":347,"user":{"displayName":"Karen Lisbeth","userId":"02790293254327695037"}},"outputId":"44b6c32a-1482-44bd-e6f5-65e997cdab57"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["{'ad': 2, 'abc': 3, 'ab': 2, 'holamundo': 9, ' ': 1}\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sE1Fa5gPy3ec"},"outputs":[],"source":["# La siguiente función debe aceptar un argumento, una lista con cadenas\n","\n","# La función debe devolver un diccionario con como keys la longitud de las cadenas y como valores\n","# listas ordenadas con las cadenas con la longitud igual a la key\n","\n","# Por ejemplo: \n","# main([\"ab\", \"abc\", \"ad\"]) \n","# debe dar {2: [\"ab\", \"ad\"], 3: [\"abc\"]} \n","\n","def main(list_1):\n","    list_1 = list_1[:]\n","    #Corrige las lienas para que se de el resultado deseado\n","    pass"]},{"cell_type":"code","source":["##Resolucion:\n","def main(list_1):\n","    x = lambda e: len(e)\n","    list_1.sort(key=x)\n","    dict_1 = dict()\n","    for i in list_1:\n","        if len(i) in dict_1: dict_1[len(i)].append(i)\n","        else: dict_1[len(i)]=[i]\n","        dict_1[len(i)].sort()\n","    print(dict_1)\n","\n","main([\"ad\", \"bbc\", \"ab\", \"adc\", \"h\", \" \"])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XWUkRM-sEUm3","executionInfo":{"status":"ok","timestamp":1659318142910,"user_tz":300,"elapsed":341,"user":{"displayName":"Karen Lisbeth","userId":"02790293254327695037"}},"outputId":"c51028b7-94bc-4c23-c81d-b236153d1ee6"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["{1: [' ', 'h'], 2: ['ab', 'ad'], 3: ['adc', 'bbc']}\n"]}]},{"cell_type":"code","source":["####################\n","print(\"FIN DEL ULTIMO TALLER <3\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WX5orSzdEZ93","executionInfo":{"status":"ok","timestamp":1659318177431,"user_tz":300,"elapsed":340,"user":{"displayName":"Karen Lisbeth","userId":"02790293254327695037"}},"outputId":"3497028b-4008-4d7a-f343-aed584d6ab3f"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["FIN DEL ULTIMO TALLER <3\n"]}]}],"metadata":{"colab":{"collapsed_sections":[],"name":"ejercicios_extra_clase_1 (4).ipynb","provenance":[]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"nbformat":4,"nbformat_minor":0}
